/*
Meraki Dashboard API

Testing SensorApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_client_SensorApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test SensorApiService CreateNetworkSensorAlertsProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var networkId string

        resp, httpRes, err := apiClient.SensorApi.CreateNetworkSensorAlertsProfile(context.Background(), networkId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SensorApiService DeleteNetworkSensorAlertsProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var networkId string
        var id string

        resp, httpRes, err := apiClient.SensorApi.DeleteNetworkSensorAlertsProfile(context.Background(), networkId, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SensorApiService GetDeviceSensorRelationships", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serial string

        resp, httpRes, err := apiClient.SensorApi.GetDeviceSensorRelationships(context.Background(), serial).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SensorApiService GetNetworkSensorAlertsCurrentOverviewByMetric", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var networkId string

        resp, httpRes, err := apiClient.SensorApi.GetNetworkSensorAlertsCurrentOverviewByMetric(context.Background(), networkId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SensorApiService GetNetworkSensorAlertsOverviewByMetric", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var networkId string

        resp, httpRes, err := apiClient.SensorApi.GetNetworkSensorAlertsOverviewByMetric(context.Background(), networkId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SensorApiService GetNetworkSensorAlertsProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var networkId string
        var id string

        resp, httpRes, err := apiClient.SensorApi.GetNetworkSensorAlertsProfile(context.Background(), networkId, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SensorApiService GetNetworkSensorAlertsProfiles", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var networkId string

        resp, httpRes, err := apiClient.SensorApi.GetNetworkSensorAlertsProfiles(context.Background(), networkId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SensorApiService GetNetworkSensorRelationships", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var networkId string

        resp, httpRes, err := apiClient.SensorApi.GetNetworkSensorRelationships(context.Background(), networkId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SensorApiService GetOrganizationSensorReadingsHistory", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.SensorApi.GetOrganizationSensorReadingsHistory(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SensorApiService GetOrganizationSensorReadingsLatest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.SensorApi.GetOrganizationSensorReadingsLatest(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SensorApiService UpdateDeviceSensorRelationships", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serial string

        resp, httpRes, err := apiClient.SensorApi.UpdateDeviceSensorRelationships(context.Background(), serial).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SensorApiService UpdateNetworkSensorAlertsProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var networkId string
        var id string

        resp, httpRes, err := apiClient.SensorApi.UpdateNetworkSensorAlertsProfile(context.Background(), networkId, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
